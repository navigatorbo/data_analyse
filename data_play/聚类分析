#聚类是数据挖掘描述性任务和预测性任务的一个重要组成部分
#以相似性为基础，把想死对象通过静态分类分成不同的组别和子集
#任意选择k个对象作为初始的聚类中心，接着对每个点确定他的聚类中心点，实际上是计算距离，一般采用均方差作为标准测度函数
#接下来计算每个新聚类的聚类中心，直到收敛，也就是确定的中心点不再改变，聚类就完成
#保证各聚类本身尽可能紧凑，而各聚类之间尽可能地分开
import numpy as np
list1=[88.0,74.0,96.0,85.0]
list2=[92.0,99.0,95.0,94.0]
list3=[91.0,87.0,99.0,95.0]
list4=[78.0,99.0,97.0,81.0]
list5=[88.0,78.0,98.0,84.0]
list6=[100.0,95.0,100.0,92.0]
data =np.array([list1,list2,list3,list4,list5,list6])
whiten = whiten(data) #算出各列元素的标准差，为新的数组
centroids,_=kmeans(whiten,2)  #对数据进行聚类，聚成2类，返回结果是一个元组
result,_=vq(whiten,centroids) #矢量量化函数 逗号(,)后面下划线表示不需要
print(result)  

#具体操作工具 sklearn
import numpy as np
from sklearn.cluster import KMeans
list1=[88.0,74.0,96.0,85.0]
list2=[92.0,99.0,95.0,94.0]


list3=[91.0,87.0,99.0,95.0]
list4=[78.0,99.0,97.0,81.0]
list5=[88.0,78.0,98.0,84.0]
list6=[100.0,95.0,100.0,92.0]
x =np.array([list1,list2,list3,list4,list5,list6])
kmeans=KMeans(n_clusters = 2).fit(x) #fit()方法对KMeans确定类别以后的这样的数据集进行聚类
pred = kmeans.predict(x) #根据聚类的结果确定所属的类列
print(pred)

#手机签字
#书写的插件  体验感好 有自动美化的作用

#图片，文件   数据库